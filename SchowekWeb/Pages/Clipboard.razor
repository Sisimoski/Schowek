@page "/"
@page "/Clipboard/{ClipboardId:int?}"

@using System.Security.Claims
@using System.IO
@using System.Globalization
@using SchowekWeb.Data
@using SchowekWeb.Models
@using Microsoft.AspNetCore.Hosting

@inject Microsoft.AspNetCore.Http.IHttpContextAccessor _httpContextAccessor
@inject IDataAccess _data
@inject IWebHostEnvironment _env

@if (ClipboardId is not null)
{
    <div class="content-wrapper">
        <div class="content-header">
            <div class="container-fluid">
                <div class="row mb-2">

                </div>
            </div>
        </div>

        <div class="content">
            <div class="container-fluid">
                <div class="row">
                    <div class="col">
                        @if (Category != null)
                        {
                            <h1 class="display-2 text-primary cut-text">@Category.CategoryName</h1>
                            <div class="d-flex align-items-center mt-2">
                                <h5 class="mb-0 text-dark cut-text">Utworzono: @Category.OnCreated.ToString("g", culture)</h5>
                                <div class="btn-group ml-auto" role="group">
                                    <button type="button" class="btn btn-sm btn-outline-secondary" data-bs-toggle="modal" @onclick="() => changeCategoryNameModal.Open()"><i class="bi bi-pencil-square"></i> Zmień nazwę</button>
                                    <button type="button" class="btn btn-sm btn-outline-danger" data-bs-toggle="modal" @onclick="() => DeleteCategoryModal.Open()"><i class="bi bi-trash-fill"></i> Usuń</button>
                                </div>
                            </div>
                            <div><hr /></div>

                            @if (Items != null)
                            {
                                if (Items.Count > 0)
                                {
                                    <div class="input-group mb-3 flex-nowrap">
                                        <span class="input-group-text"><i class="bi bi-search"></i></span>
                                        <input @bind-value="SearchTerm" @bind-value:event="oninput" type="text" class="form-control" placeholder="Szukaj..." />
                                    </div>
                                    <div class="row row-cols-2 row-cols-md-4 row-cols-md-5">
                                        @foreach (var item in FilteredItems.OrderByDescending(Items => Items.OnCreated))
                                        {
                                            <div class="col">
                                                <TextCard ItemModel="@item" OnDeleted="OnInitializedAsync" />
                                                <ItemDetails ItemModel="@item"></ItemDetails>
                                            </div>
                                        }
                                    </div>
                                }
                                else
                                {
                                    <h3 class="text-warning">W tym schowku nie ma żadnych danych.</h3>
                                    <p>Dodaj nowe przedmioty do tego schowka używając pola tekstowego na dole, bądź wstawiając plik.</p>
                                }
                            }
                        }
                        else
                        {
                            <h1 class="display-3 text-danger mb-5">Nie masz dostępu do tego schowka</h1>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- Main Footer -->
    <footer class="main-footer">
        <EditForm Model="@newItem" OnValidSubmit="@InsertTextItem">
            <div class="input-group">
                <InputTextArea @bind-Value="@newItem.Text" class="form-control" placeholder="Wprowadź tekst..." rows="1" style="max-height: 100px;"></InputTextArea>
                <button type="submit" class="btn btn-outline-primary">Wyślij</button>
                <button type="button" class="btn btn-outline-primary dropdown-toggle dropdown-toggle-split"
                        data-bs-toggle="dropdown" aria-expanded="false">
                    <span class="visually-hidden">Toggle Dropdown</span>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item disabled" href="#">Więcej</a>
                    </li>
                    <li>
                        <hr class="dropdown-divider">
                    </li>
                    <li>
                        <label for="inputFile" class="dropdown-item">
                            Wstaw plik...
                            <InputFile OnChange="@InsertFileItem" accept="image/*,video/*,audio/*,application/*" id="inputFile" class="d-none"></InputFile>
                            @*<a class="dropdown-item" href="#">Wstaw plik...</a>*@
                        </label>
                    </li>

                </ul>
            </div>
        </EditForm>
    </footer>

    <ChangeCategoryNameModal @ref="changeCategoryNameModal" CategoryModel="@Category" OnCategoryNameChange="@CategoryChanged" />
    <DeleteCategoryModal @ref="DeleteCategoryModal" CategoryModel="@Category" />
}
else
{
    <div class="content-wrapper">
        <div class="content-header">
            <div class="container-fluid">
                <div class="row mb-2">

                </div>
            </div>
        </div>

        <div class="content">
            <div class="container-fluid">
                <div class="row">
                    <div class="col">
                        @if (Items != null)
                        {
                            if (Items.Count > 0)
                            {
                                <h1 class="display-2 text-primary cut-text">Wszystkie rzeczy</h1>
                                <div><hr /></div>

                                <div class="input-group mb-3 flex-nowrap">
                                    <span class="input-group-text"><i class="bi bi-search"></i></span>
                                    <input @bind-value="SearchTerm" @bind-value:event="oninput" type="text" class="form-control" placeholder="Szukaj..." />
                                </div>
                                <div class="row row-cols-2 row-cols-md-4 row-cols-md-5">
                                    @foreach (var item in FilteredItems.OrderByDescending(Items => Items.OnCreated))
                                    {
                                        <div class="col">
                                            <TextCard ItemModel="@item" OnDeleted="OnInitializedAsync" />
                                            <ItemDetails ItemModel="@item"></ItemDetails>
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <h1 class="display-1 text-primary text-center">Witaj w Schowku</h1>
                                <h3 class="text-warning">Nie masz jeszcze żadnych rzeczy.</h3>
                                <p>Dodaj nowe przedmioty, wybierając swój schowek. Jeśli jeszcze nie masz schowka, najpierw dodaj nowy schowek.</p>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@code {
    [Parameter]
    public int? ClipboardId { get; set; }

    public Category Category { get; set; } = new Category();

    public List<Item> Items;

    // Initialize SearchTerm to "" to prevent null's
    string SearchTerm { get; set; } = "";

    public List<Item> FilteredItems => Items.Where(i => i.Text.ToLower().Contains(SearchTerm.ToLower())).ToList();

    private DisplayItemModel newItem = new DisplayItemModel();

    CultureInfo culture = new CultureInfo("pl-PL");

    private ChangeCategoryNameModal changeCategoryNameModal { get; set; }
    private DeleteCategoryModal DeleteCategoryModal { get; set; }

    private async Task InsertTextItem()
    {
        Item i = new Item
        {
            Text = newItem.Text,
            OnCreated = DateTime.Now,
            CategoryId = Category.Id,
            UserId = this.UserId
        };
        await _data.AddItem(i);

        Items.Add(i);

        newItem = new DisplayItemModel();
    }

    public string FileName { get; set; }
    public string FilePath { get; set; }
    public string FileType { get; set; }
    public string FileSize { get; set; }

    private async Task InsertFileItem(InputFileChangeEventArgs args)
    {
        var file = args.File;

        if (file is not null)
        {
            var maxAllowedFileSize = 50 * 1024 * 1024; //50 MB

            FileName = file.Name;
            FileType = file.ContentType;
            FileSize = file.Size.ToString();

            var relativePath = Path.Combine("Uploads", UserId);
            var dirToSave = Path.Combine(_env.WebRootPath, relativePath);
            var di = new DirectoryInfo(dirToSave);

            if (!di.Exists)
            {
                di.Create();
            }

            FilePath = Path.Combine(dirToSave, file.Name);

            using (var stream = file.OpenReadStream(maxAllowedSize: maxAllowedFileSize))
            {
                using (var fileStream = new FileStream(FilePath, FileMode.Create, FileAccess.Write))
                {
                    await stream.CopyToAsync(fileStream);
                }
            }
        }

        @*Item i = new Item
        {
            FileName = this.FileName,
            FilePath = this.FilePath,
            FileType = this.FilePath,
            FileSize = this.FileSize,
            OnCreated = DateTime.Now,
            CategoryId = Category.Id,
            UserId = this.UserId
        };
        await _data.AddItem(i);
        Items.Add(i);

        newItem = new DisplayItemModel();*@
    }

    public string UserId { get; set; }

    public void GetUserIdData()
    {
        if (_httpContextAccessor.HttpContext.User.Identity.IsAuthenticated == true)
        {
            UserId = _httpContextAccessor.HttpContext.User.FindFirst(ClaimTypes.NameIdentifier).Value;
        }
    }

    protected async Task CategoryChanged()
    {
        Category = await _data.GetCategoryByUserId((int)ClipboardId, UserId);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (ClipboardId is not null)
        {
            Category = await _data.GetCategoryByUserId((int)ClipboardId, UserId);
            Items = await _data.GetUsersItemsByCategory((int)ClipboardId, UserId);
        }
        else
        {
            Items = await _data.GetUsersItems(UserId);
        }
    }

    protected override void OnInitialized()
    {
        GetUserIdData();
    }

    protected override async Task OnInitializedAsync()
    {
        if (ClipboardId is not null)
        {
            Category = await _data.GetCategoryByUserId((int)ClipboardId, UserId);
            Items = await _data.GetUsersItemsByCategory((int)ClipboardId, UserId);
        }
        else
        {
            Items = await _data.GetUsersItems(UserId);
        }
    }
}
