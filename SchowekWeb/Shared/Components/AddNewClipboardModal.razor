@using SchowekWeb.Data
@using SchowekWeb.Models
@inject IDataAccess _data
@inject UserAccess userData
<!-- Modal -->
<div class="modal @ModalClass" id="addNewCategory" tabindex="-1" aria-hidden="true" style="display:@ModalDisplay">
    <EditForm Model="@CategoryModel" OnValidSubmit="@InsertCategory">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Dodaj nowy schowek</h5>
                    <button @onclick="() => Close()" type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <DataAnnotationsValidator />
                    <InputText @bind-Value="@CategoryModel.CategoryName" type="text" class="form-control" placeholder="Wprowadź nazwę schowka" />
                    <ValidationMessage For="() => CategoryModel.CategoryName" />
                </div>
                <div class="modal-footer">
                    <button @onclick="() => Close()" type="button" class="btn btn-secondary" data-bs-dismiss="modal">Anuluj</button>
                    <button type="submit" class="btn btn-primary">Dodaj</button>
                </div>
            </div>
        </div>
    </EditForm>
</div>

@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    public void Open()
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    public void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }

    [Parameter]
    public Category CategoryModel { get; set; }

    [Parameter]
    public EventCallback<Category> OnAdded { get; set; }

    private string UserId { get; set; }

    private async Task InsertCategory()
    {
        Category c = new Category
        {
            CategoryName = CategoryModel.CategoryName,
            Icon = CategoryModel.Icon,
            OnCreated = DateTime.Now,
            UserId = this.UserId
        };
        await _data.AddCategory(c);
        await OnAdded.InvokeAsync(c);

        CategoryModel = new();
        Close();

    }

    protected override void OnInitialized()
    {
        UserId = userData.GetUserIdData();
    }
}
