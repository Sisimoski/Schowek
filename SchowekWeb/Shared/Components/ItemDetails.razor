@using System.Globalization
@using SchowekWeb.Data
@using SchowekWeb.Models
@inject IDataAccess _data
@inject NavigationManager navManager

<div class="modal @ModalClass" id="@($"itemDetails{ItemModel.Id}")" tabindex="-1" aria-hidden="true" style="display:@ModalDisplay">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title text-primary">@ItemModel.Category.CategoryName</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (ItemModel.Text is not null)
                {
                    <p class="text-primary">@ItemModel.Text</p>
                }
                else if (ItemModel.FileType.Contains("image"))
                {
                    <img src="@ItemModel.FilePath" class="rounded img-fluid">
                }
                else if (ItemModel.FileType.Contains("video"))
                {
                    <video controls class="img-fluid">
                        <source src="@ItemModel.FilePath" type="@ItemModel.FileType" />
                    </video>
                }
                else if (ItemModel.FileType.Contains("audio"))
                {
                    <audio controls class="img-fluid">
                        <source src="@ItemModel.FilePath" type="@ItemModel.FileType" />
                    </audio>
                }
                else if (ItemModel.FileType.Contains("text") ||
                    ItemModel.FileType.Contains("application"))
                {
                    <h5 class="text-primary">Nazwa pliku: @ItemModel.FileName</h5>
                    <p>Typ pliku: @ItemModel.FileType</p>
                    <p>Rozmiar: @SizeSuffix(ItemModel.FileSize)</p>
                }
                <hr />
                <small>@ItemModel.OnCreated.ToString("f", culture)</small>
            </div>
            <div class="modal-footer">
                @if (ItemModel.FilePath is not null)
                {
                    <a class="btn btn-primary" href="@ItemModel.FilePath" role="button" download target="_top"><i class="bi bi-cloud-download"></i> Pobierz</a>
                }
                <button @onclick="() => Close()" type="button" class="btn btn-secondary" data-bs-dismiss="modal">Anuluj</button>
            </div>
        </div>
    </div>
</div>

@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter]
    public Item ItemModel { get; set; }

    CultureInfo culture = new CultureInfo("pl-PL");

    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    public void Open()
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    public void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }

    static readonly string[] SizeSuffixes =
                   { "bajtów", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB" };
    static string SizeSuffix(Int64 value, int decimalPlaces = 2)
    {
        if (decimalPlaces < 0) { throw new ArgumentOutOfRangeException("decimalPlaces"); }
        if (value < 0) { return "-" + SizeSuffix(-value); }
        if (value == 0) { return string.Format("{0:n" + decimalPlaces + "} bajtów", 0); }

        // mag is 0 for bytes, 1 for KB, 2, for MB, etc.
        int mag = (int)Math.Log(value, 1024);

        // 1L << (mag * 10) == 2 ^ (10 * mag)
        // [i.e. the number of bytes in the unit corresponding to mag]
        decimal adjustedSize = (decimal)value / (1L << (mag * 10));

        // make adjustment when the value is large enough that
        // it would round up to 1000 or more
        if (Math.Round(adjustedSize, decimalPlaces) >= 1000)
        {
            mag += 1;
            adjustedSize /= 1024;
        }

        return string.Format("{0:n" + decimalPlaces + "} {1}",
            adjustedSize,
            SizeSuffixes[mag]);
    }
}
